https://www.codechef.com/START197D/problems/SPLIT7

import sys

def solve():
    try:
        n, k = map(int, sys.stdin.readline().split())
        s = sys.stdin.readline().strip()
    except (IOError, ValueError):
        return

    pz = [0] * (n + 1)
    po = [0] * (n + 1)
    for i in range(n):
        pz[i + 1] = pz[i] + (1 if s[i] == '0' else 0)
        po[i + 1] = po[i] + (1 if s[i] == '1' else 0)

    d = [pz[i] - po[i] for i in range(n + 1)]

    logn = (n + 1).bit_length()
    st = [[0] * logn for _ in range(n + 1)]
    for i in range(n + 1):
        st[i][0] = d[i]
    for j in range(1, logn):
        for i in range(n + 1 - (1 << j) + 1):
            st[i][j] = max(st[i][j - 1], st[i + (1 << (j - 1))][j - 1])

    log_tbl = [0] * (n + 2)
    for i in range(2, n + 2):
        log_tbl[i] = log_tbl[i // 2] + 1

    def query_max(l, r):
        if l > r:
            return -float('inf')
        j = log_tbl[r - l + 1]
        return max(st[l][j], st[r - (1 << j) + 1][j])

    def valid(x):
        if x == 0:
            return True
        parts = 0
        pos = 0
        while pos < n:
            nxt = float('inf')
            z_target = pz[pos] + x
            if z_target <= pz[n]:
                l, r = pos + 1, n
                res = float('inf')
                while l <= r:
                    m = (l + r) // 2
                    if pz[m] >= z_target:
                        res = m
                        r = m - 1
                    else:
                        l = m + 1
                nxt = min(nxt, res)
            o_target = po[pos] + x
            if o_target <= po[n]:
                l, r = pos + 1, n
                res = float('inf')
                while l <= r:
                    m = (l + r) // 2
                    if po[m] >= o_target:
                        res = m
                        r = m - 1
                    else:
                        l = m + 1
                nxt = min(nxt, res)
            l, r = pos + 1, n
            res = float('inf')
            const = x + pz[pos]
            while l <= r:
                m = (l + r) // 2
                max_d = query_max(pos, m)
                if po[m] + max_d >= const:
                    res = m
                    r = m - 1
                else:
                    l = m + 1
            nxt = min(nxt, res)
            if nxt > n:
                return False
            pos = nxt
            parts += 1
            if parts >= k:
                return True
        return False

    lo, hi, res = 0, n, 0
    while lo <= hi:
        mid = (lo + hi) // 2
        if mid == 0:
            lo = mid + 1
            continue
        if valid(mid):
            res = mid
            lo = mid + 1
        else:
            hi = mid - 1

    print(res)

def main():
    try:
        t = int(sys.stdin.readline())
        for _ in range(t):
            solve()
    except (IOError, ValueError):
        return

if __name__ == "__main__":
    main()
