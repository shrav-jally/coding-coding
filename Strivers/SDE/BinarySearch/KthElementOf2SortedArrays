https://takeuforward.org/plus/dsa/problems/kth-element-of-2-sorted-arrays

class Solution:
    def kthElement(self, a, b, k):
        m, n = len(a), len(b)
        
        # Ensure a is the smaller array
        if m > n:
            return self.kthElement(b, a, k)
        
        # Define binary search boundaries
        low = max(0, k - n)
        high = min(k, m)
        
        while low <= high:
            cut1 = (low + high) // 2
            cut2 = k - cut1

            # Get boundaries (or infinities if out of bounds)
            l1 = a[cut1 - 1] if cut1 > 0 else float('-inf')
            l2 = b[cut2 - 1] if cut2 > 0 else float('-inf')
            r1 = a[cut1] if cut1 < m else float('inf')
            r2 = b[cut2] if cut2 < n else float('inf')

            # Check for correct partition
            if l1 <= r2 and l2 <= r1:
                return max(l1, l2)
            elif l1 > r2:
                high = cut1 - 1
            else:
                low = cut1 + 1

        return -1  # In case of invalid input
