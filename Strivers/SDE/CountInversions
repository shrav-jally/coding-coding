https://takeuforward.org/plus/dsa/problems/count-inversions

#O(nÂ²) time, O(1) space

class Solution:
    def numberOfInversions(self, nums):
        n = len(nums)
        count = 0
        for i in range(n):
            for j in range(i + 1, n):
                if nums[i] > nums[j]:
                    count += 1
        return count

#O(n log n) time, O(n) space

class Solution:
    def numberOfInversions(self, nums):
        def merge_sort(arr):
            if len(arr) <= 1:
                return arr, 0
            mid = len(arr) // 2
            left, inv_left = merge_sort(arr[:mid])
            right, inv_right = merge_sort(arr[mid:])
            merged, inv_split = merge(left, right)
            return merged, inv_left + inv_right + inv_split

        def merge(left, right):
            i = j = inv = 0
            merged = []
            while i < len(left) and j < len(right):
                if left[i] <= right[j]:
                    merged.append(left[i])
                    i += 1
                else:
                    merged.append(right[j])
                    inv += len(left) - i
                    j += 1
            merged.extend(left[i:])
            merged.extend(right[j:])
            return merged, inv

        _, count = merge_sort(nums)
        return count
