https://takeuforward.org/plus/dsa/problems/find-the-repeating-and-missing-number

O(n) time, O(n) space

class Solution:
    def findMissingRepeatingNumbers(self, nums):
        seen = set()
        repeat = missing = None
        for num in nums:
            if num in seen:
                repeat = num
            seen.add(num)
        for i in range(1, len(nums) + 1):
            if i not in seen:
                missing = i
                break
        return [repeat, missing]

O(n) time, O(1) space 

class Solution:
    def findMissingRepeatingNumbers(self, nums):
        n = len(nums)
        sum_nums = sum(nums)
        sum_sq_nums = sum(x * x for x in nums)
        sum_n = n * (n + 1) // 2
        sum_sq_n = n * (n + 1) * (2 * n + 1) // 6
        diff = sum_nums - sum_n  # x - y
        diff_sq = sum_sq_nums - sum_sq_n  # x^2 - y^2 = (x - y)(x + y)
        sum_xy = diff_sq // diff  # x + y
        x = (diff + sum_xy) // 2
        y = x - diff
        return [x, y]
