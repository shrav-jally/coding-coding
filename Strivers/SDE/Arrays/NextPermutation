https://takeuforward.org/plus/dsa/problems/next-permutation

#O(n log n) time, O(1) space

class Solution:
    def nextPermutation(self, nums):
        from itertools import permutations
        perms = sorted(set(permutations(nums)))
        idx = perms.index(tuple(nums))
        nxt = perms[(idx + 1) % len(perms)]
        for i in range(len(nums)):
            nums[i] = nxt[i]

#O(n) time, O(1) space

class Solution:
    def nextPermutation(self, nums):
        i = len(nums) - 2
        while i >= 0 and nums[i] >= nums[i + 1]:
            i -= 1
        if i >= 0:
            j = len(nums) - 1
            while nums[j] <= nums[i]:
                j -= 1
            nums[i], nums[j] = nums[j], nums[i]
        left, right = i + 1, len(nums) - 1
        while left < right:
            nums[left], nums[right] = nums[right], nums[left]
            left += 1
            right -= 1
