https://takeuforward.org/plus/dsa/problems/maximum-sum-combination

import heapq

class Solution:
    def maxSumCombinations(self, nums1, nums2, k):
        nums1.sort(reverse=True)
        nums2.sort(reverse=True)
        n = len(nums1)
        
        max_heap = []
        visited = set()
        result = []

        # Push the largest combination
        heapq.heappush(max_heap, (-(nums1[0] + nums2[0]), 0, 0))
        visited.add((0, 0))

        while len(result) < k and max_heap:
            current_sum, i, j = heapq.heappop(max_heap)
            result.append(-current_sum)  # store as positive

            # Next combination: move in nums1
            if i + 1 < n and (i + 1, j) not in visited:
                heapq.heappush(max_heap, (-(nums1[i + 1] + nums2[j]), i + 1, j))
                visited.add((i + 1, j))

            # Next combination: move in nums2
            if j + 1 < n and (i, j + 1) not in visited:
                heapq.heappush(max_heap, (-(nums1[i] + nums2[j + 1]), i, j + 1))
                visited.add((i, j + 1))

        return result
